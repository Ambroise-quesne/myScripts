#!/usr/bin/env python
# -*- coding=utf-8 -*-

"""
Manage VASP job operation and extract interesting data.

This script does not run the calculation. You have to check the input files
before !!

SYNTAX 
        v <sub-command> [OPTIONS]

SUB-COMMANDS

    get help
    --------
 
        -h, --hep, h, help
            print this help and exit.

    Manage calculations
    -------------------

        clean
            delete vasp output files

        restart
            copy necessary files for a restart calculation into a restart
            directory. None of the copied files are modified.

        sp
            copy the necessary files for an energy calculation into a 
            SinglePoint directory. In the new INCAR file, the following 
            keywords are changed:
                * NSW    -> NSW = 0
                * ISMEAR -> ISMEAR = -5
                * EDIFFG -> deleted
                * IBRION -> deleted
                * ISIF   -> deleted
                * LREAL  -> deleted
                * SIGMA  -> deleted

        spb
            Do the same things as sp but add keywords for a Bader calculation:
                * LAECHG = True
                * NGXF   = XXX
                * NGYF   = YYY
                * NGZF   = ZZZ

            The values of XXX, YYY and ZZZ are computed from lattice parameters
            assuming a distance between grid points of 0.03A.

    Extract data
    ------------

        cell [FILENAME]
            print lattice parameters calculated from [FILENAME]. [FILENAME]
            must be a POSCAR/CONTCAR file. If [FILENAME] is absent, a list of
            available POSCAR/CONTCAR files in the working directory is printed.

        cl [OPTIONS]
            Read core state eigenenergies from OUTCAR file (need pymatgen).

            v cl
                Read the INCAR file and output core state eigenergy of the AO
                of the atom define by CLNT, CLN and CLL keywords.

            v cl select
                Output all available core state eigenergies and ask for the
                atom index and the AO name of the core state.

            c cl [atom index] [atomic orbital]
                Output the core state eigenergies of the atom and the atomic
                orbital defined in the options. The first atom index is 1.
                [atomic orbital] is something like 1s, 2p, 3s ...

        chgsum [CHGCAR1] [CHGCAR2] [factor]
            Compute CHGCAR1 + factor * CHGCAR2 where CHGCAR are denisty file.
            This command needs pymatgen.

REMARK
        Job files are supposed to begin by 'j' or to have  a '.job' extension.

        Some functions may need pymatgen module (see http://www.pymatgen.org).
        
"""

__author__ = "Germain Salvato-Vallverdu"
__email__ = "germain.vallverdu@univ-pau.fr"
__licence__ = "GPL"
__date__ = "June 2014"

import sys
import os
import shutil
import fnmatch

from math import sqrt, acos, pi, fabs, ceil

options = ["h", "help", "-h", "--help",
           "clean", "sp", "spb", "restart",
           "cell", "cl", "chgsum"]

dashedLine = "".join(50 * ["-"])

# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
# General functions
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

def die(m="", code=0):
    """ print error and exit """
    print(m)
    exit(code)

def question(message):
    """ ask a question and read answer """
    answer = None
    while answer is None:
        a = raw_input(message + " (y/n) : ")
        if a.lower()[0] == "n":
            answer = False
        elif a.lower()[0] == "y" or a.lower()[0] == "o":
            answer = True
        else:
            print("hit 'y' for yes or 'n' for no")
    return answer

# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
# Check and select functions
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

def check():
    """ check options """

    if len(sys.argv) < 2:
        die("\nERROR, you must give a sub-command", 1)

    opt = sys.argv[1]
    if opt not in options:
        die("\nERROR, option '%s' unknown" % opt, 1)

def select():
    """ select the operation to do """

    # help
    for opt in sys.argv:
        if opt in ["h", "help", "-h", "--help"]:
            die(__doc__)

    # command name 
    opt = sys.argv[1].lower()

    if opt == "clean":
        cleanVasp()
    elif opt == "sp":
        makeSP()
    elif opt == "spb":
        makeSPBader()
    elif opt == "restart":
        makeRestart("restart")

    elif opt == "cell":
        cell() 
    elif opt == "cl":
        coreLevel()
    elif opt == "chgsum":
        chgsum()

    else:
        die("This option is still not implemented")

    if opt in ["sp", "spb", "restart"]:
        print("\nCAREFULLY look at the input files before running the calculation")

# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
# Manage calculations
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

def makeRestart(dirname):
    """ copy necessary files for restarting a vasp calculation """

    print("# copying input files")
    wd = os.getcwd()
    ndir = os.path.join(wd, dirname)

    # create directory
    if os.path.exists(ndir):
        if not question(dirname + " directory exists, continue ?"):
            die()
    else:
        os.mkdir(ndir)
        
    # copy input files
    for f in ["INCAR", "POTCAR", "KPOINTS"]:
        if os.path.exists(os.path.join(wd, f)):
            print("cp " + f + " -> " + ndir)
            shutil.copy(os.path.join(wd, f), ndir)
        else:
            die("File {0} does not exist".format(f), 1)

    # CONTCAR -> POSCAR
    if os.path.exists(os.path.join(wd, "CONTCAR")):
        print("cp CONTCAR -> " + os.path.join(ndir, "POSCAR"))
        shutil.copy(os.path.join(wd, "CONTCAR"), os.path.join(ndir, "POSCAR"))
    else:
        die("CONTCAR file not found", 1)

    # WAVECAR, CHGCAR
    for f in ["WAVECAR", "CHGCAR"]:
        if os.path.exists(f) and os.path.getsize(f) != 0:
            print("cp " + f + " -> " + ndir)
            shutil.copy(os.path.join(wd, f), ndir)

    # job file
    jobs  = fnmatch.filter(os.listdir(wd), "j*")
    jobs += fnmatch.filter(os.listdir(wd), "*.job")
    jobs = [job for job in jobs if not fnmatch.fnmatchcase(job, "*.o*")]
    if len(jobs) == 1:
        print("cp " + jobs[0] + " -> " + ndir)
        shutil.copy(os.path.join(wd, jobs[0]), ndir)
    elif len(jobs) > 1:
        if question("Do you want to select a job file ?"):
            print("\nSelect a job file among:")
            for i, job in enumerate(jobs):
                print("     %d : %s" % (i, job))
            job = jobs[int(raw_input("job file number = "))]
            print("cp " + job + " -> " + ndir)
            shutil.copy(os.path.join(wd, job), ndir)
    else:
        print("I did not find a job file, copy it by yourself")

def makeSP():
    """ copy necessary files for a single point energy calculation into a
    directory called SinglePoint. The new INCAR file is modified in the
    following way:
        * NSW    -> NSW = 0
        * ISMEAR -> ISMEAR = -5
        * EDIFFG -> deleted
        * IBRION -> deleted
        * ISIF   -> deleted
        * LREAL  -> deleted
        * SIGMA  -> deleted
    """

    wd = os.getcwd()
    dirname = "SinglePoint"
    spdir = os.path.join(wd, dirname)

    # copy files
    makeRestart(dirname)

    # read INCAR and delete or change lines
    print("\n# Changing INCAR file")
    incar = open(os.path.join(wd, "INCAR"), "r").readlines()

    lorbit = False
    dline = list()
    for i, line in enumerate(incar):
        for tag in ["EDIFFG", "IBRION", "ISIF", "LREAL", "SIGMA"]:
            if tag in line:
                dline.append(line)

        if "NSW" in line:
            incar[i] = "  NSW = 0\n"

        elif "ISMEAR" in line:
            incar[i] = "  ISMEAR = -5\n"

        elif "LORBIT" in line:
            lorbit = True

    # remove selected line
    for line in dline:
        incar.remove(line)

    # add some keywords
    if not lorbit:
        incar.append("\nAdded tags\n")
        incar.append("  LORBIT = 11\n")

    # write new INCAR
    open(os.path.join(spdir, "INCAR"), "w").writelines(incar)

def makeSPBader():
    """ copy necessary files for a single point energy calculation into a
    directory called SinglePoint and add specific key words necessary for a
    bader charges calculation. The new INCAR file is modified in the
    following way:
        * NSW    -> NSW = 0
        * ISMEAR -> ISMEAR = -5
        * EDIFFG -> deleted
        * IBRION -> deleted
        * ISIF   -> deleted
        * LREAL  -> deleted
        * SIGMA  -> deleted
        * LAECHG -> added LAECHG = True
    """

    wd = os.getcwd()
    dirname = "SinglePoint"
    spdir = os.path.join(wd, dirname)

    # set up singlePoint calculation
    makeSP()

    # read INCAR and delete or change lines
    print("\n# Adding bader keywords")
    incar = open(os.path.join(spdir, "INCAR"), "r").readlines()

    dline = list()
    present = False
    for i, line in enumerate(incar):
        for tag in ["LAECHG", "NGXF", "NGYF", "NGZF"]:
            if tag in line:
                present = True
                dline.append(line)

    # remove selected line
    if present:
        print("Some bader related keywords are presents and might be modified.")
        for line in dline:
            print(line[:-1])
        if question("\nThese lines will be deleted. Continu ?"):
            for line in dline:
                incar.remove(line)
        else:
            die()

    # read CONTCAR file
    poscar = open(os.path.join(spdir, "POSCAR"), "r").readlines()
    scale = float(poscar[1])
    veca  = [scale * float(x) for x in poscar[2].split()[0:3]]
    vecb  = [scale * float(x) for x in poscar[3].split()[0:3]]
    vecc  = [scale * float(x) for x in poscar[4].split()[0:3]]
    a = sqrt(veca[0]**2 + veca[1]**2 + veca[2]**2)
    b = sqrt(vecb[0]**2 + vecb[1]**2 + vecb[2]**2)
    c = sqrt(vecc[0]**2 + vecc[1]**2 + vecc[2]**2)

    # bader grid
    dx = 0.03
    if not question("dx = %f \t accept ?" % dx):
        print("Enter a new dx value")
        dx = float(raw_input("dx = "))
        print("dx = %f" % dx)
    ngxf = int(ceil(a / dx / 10.) * 10)
    ngyf = int(ceil(b / dx / 10.) * 10)
    ngzf = int(ceil(c / dx / 10.) * 10)

    print("Bader grid :")
    print("dx = {0} ".format(dx))
    print("a = %8.3f      NGXF = %d" % (a, ngxf))
    print("b = %8.3f      NGYF = %d" % (b, ngyf))
    print("c = %8.3f      NGZF = %d" % (c, ngzf))

    # add bader keywords
    incar.append("\nBader\n")
    incar.append("  LAECHG = True\n")
    incar.append("  NGXF = %d\n" % ngxf)
    incar.append("  NGYF = %d\n" % ngyf)
    incar.append("  NGZF = %d\n" % ngzf)

    # write new INCAR
    open(os.path.join(spdir, "INCAR"), "w").writelines(incar)

def cleanVasp():
    """ delete vasp output files """
    wd = os.getcwd()
    files = ["IBZKPT", "OSZICAR", "XDATCAR", "PCDAT", "DOSCAR", "CONTCAR",
             "CHG", "CHGCAR", "WAVECAR", "PROCAR", "EIGENVAL", "vasprun.xml",
             "OUTCAR", "DYNMAT"]
    for f in files:
        if os.path.exists(os.path.join(wd, f)):
            print("rm " + os.path.join(wd, f))
            os.remove(os.path.join(wd, f))

# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
# extract data
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

def cell():
    """ compute and print lattice parameters """

    wd = os.getcwd()

    # POSCAR file
    narg = len(sys.argv)
    if narg == 2:
        print(wd + ":")
        posfile  = fnmatch.filter(os.listdir(wd), "POSCAR*")
        posfile += fnmatch.filter(os.listdir(wd), "CONTCAR*")
        posfile += fnmatch.filter(os.listdir(wd), "*.vasp")
        for i, f in enumerate(posfile):
            print("    %3d -> %s" % (i, f))
        poscar = posfile[int(raw_input("\nfile number = "))]

    elif narg == 3:
        poscar = sys.argv[2]

    else:
        die("Error, bad arguments. Try {0} -h to get some \
            help".format(sys.argv[0]), 1)

    # check data
    if not os.path.exists(poscar):
        die("Error : file {0} does not exist".format(poscar), 1)

    # read poscar file
    lines = open(poscar, "r").readlines()
    title = lines[0][0:-1]
    scale = float(lines[1])
    veca  = [scale * float(v) for v in lines[2].split()[0:3]]
    vecb  = [scale * float(v) for v in lines[3].split()[0:3]]
    vecc  = [scale * float(v) for v in lines[4].split()[0:3]]

    # lattice parameters
    a = sqrt(veca[0]**2 + veca[1]**2 + veca[2]**2)
    b = sqrt(vecb[0]**2 + vecb[1]**2 + vecb[2]**2)
    c = sqrt(vecc[0]**2 + vecc[1]**2 + vecc[2]**2)

    # angles
    scalab = veca[0] * vecb[0] + veca[1] * vecb[1] + veca[2] * vecb[2]
    scalac = veca[0] * vecc[0] + veca[1] * vecc[1] + veca[2] * vecc[2]
    scalbc = vecb[0] * vecc[0] + vecb[1] * vecc[1] + vecb[2] * vecc[2]

    scalab /= a * b
    scalac /= a * c
    scalbc /= b * c

    # alpha
    if fabs(scalbc) < 1.:
        alpha = acos(scalbc) * 180. / pi
    else:
        die("Error, angle alpha")

    if fabs(scalac) < 1.:
        beta = acos(scalac) * 180. / pi
    else:
        die("Error, angle beta")

    if fabs(scalab) < 1.:
        gamma = acos(scalab) * 180. / pi
    else:
        die("Error, angle gamma")

    print(dashedLine)
    print(poscar + " : " + title)
    print(dashedLine)
    print("a     = %10.5f" % a)
    print("b     = %10.5f" % b)
    print("c     = %10.5f" % c)
    print("alpha = %10.3f" % alpha)
    print("beta  = %10.3f" % beta)
    print("gamma = %10.3f" % gamma)
    print(dashedLine)

def coreLevel():
    """ extract core level """

    AOname = ["s", "p", "d", "f"]

    try:
        from pymatgen.io.vaspio.vasp_output import Outcar
        from pymatgen.io.vaspio.vasp_input import Incar
        import pymatgen as mg

        cl = Outcar("OUTCAR").read_core_state_eigen()
        symbol = [specie.symbol for specie in mg.read_structure("POSCAR").species]

        if len(sys.argv) == 2:
            # try to read from INCAR
            incar = Incar.from_file("INCAR")
            iat = incar["CLNT"]

            n = incar["CLN"]
            l = incar["CLL"]

            ao = "%d%s" % (n, AOname[l])

        elif sys.argv[2] == "select":
            # ask for atom number and orbital
            print("    atom    Atomic orbital")
            for iat, cl_at in enumerate(cl):
                line = "%4s %4d    " % (symbol[iat], iat + 1)
                line += "   ".join(cl_at.keys())
                print(line)

            iat = int(raw_input("Atom number : "))
            ao = raw_input("atomic orbital : ")

        else:
            # atom and AO selected from command line
            try:
                iat = int(sys.argv[2])
            except ValueError:
                die("Error atom number must be an integer", 1)

            ao = sys.argv[3]

        # print core state energy
        if cl[iat-1].has_key(ao):
            print("atom %d -> %2s_%2s = %f eV" % (iat, symbol[iat-1], ao, cl[iat-1][ao][-1]))
        else:
            die("Atom index and AO unconsistent.\
                \n    atom: %s %d\n    AO  : %s" % (symbol[iat-1], iat, ao),1)

    except ImportError:
        die("\n ## Pymatgen may be not available and I need it to do what you \
        ask for ##", 1)

def chgsum():
    """ linear add of CHGCAR files """

    try:
        from pymatgen.io.vaspio.vasp_output import Chgcar

        scale_factor = 1.

        # command line options
        if len(sys.argv) == 4:
            chgcar1 = sys.argv[2]
            chgcar2 = sys.argv[3]

        elif len(sys.argv) == 5:
            chgcar1 = sys.argv[2]
            chgcar2 = sys.argv[3]
            try:
                scale_factor = float(sys.argv[4])
            except ValueError:
                die("Error, scale_factor must be a number", 1)
        else:
            die("Error in arguemnts list. try {0} -h to get some \
                help".format(sys.argv[0]), 1)
            
        # ask if you agree the computation
        print("I will compute : {0} + {1}*{2}".format(chgcar1, scale_factor,\
            chgcar2))

        if not question("Do you agree ?"):
            die()

        # files exist ?
        if not os.path.exists(chgcar1):
            die("Error : File '{0}' does not exist !\n".format(chgcar1))

        if not os.path.exists(chgcar2):
            die("Error : File '{0}' does not exist !\n".format(chgcar2))

        # sum densities
        print("Reading {0}".format(chgcar1))
        rho1 = Chgcar.from_file(chgcar1)
        print("Reading {0}".format(chgcar2))
        rho2 = Chgcar.from_file(chgcar2)
        rho_sum = rho1.linear_add(rho2, scale_factor)

        # name of output file
        print(dashedLine)
        if os.path.exists("CHGCAR_sum"):
            if not question("file CHGCAR_sum exists, overwrite it ?"):
                die()
        print(" write sum density in : CHGCAR_sum\n" + dashedLine)
        rho_sum.write_file("CHGCAR_sum")

    except ImportError:
        die("\n ## Pymatgen may be not available and I need it to do what you \
        ask for ##", 1)

if __name__ == "__main__":
    check()
    select()

